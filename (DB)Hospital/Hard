#Hard_completed on May 17, 2024

#1. Show all of the patients grouped into weight groups.
# Show the total amount of patients in each weight group.
# Order the list by the weight group decending.

SELECT COUNT(patient_id) AS patients_in_group,
	   CASE WHEN weight BETWEEN 0 AND 9 THEN 0
       		WHEN weight BETWEEN 10 AND 19 THEN 10
            WHEN weight BETWEEN 20 AND 29 THEN 20
            WHEN weight BETWEEN 30 AND 39 THEN 30
            WHEN weight BETWEEN 40 AND 49 THEN 40
            WHEN weight BETWEEN 50 AND 59 THEN 50
            WHEN weight BETWEEN 60 AND 69 THEN 60
            WHEN weight BETWEEN 70 AND 79 THEN 70
            WHEN weight BETWEEN 80 AND 89 THEN 80
            WHEN weight BETWEEN 90 AND 99 THEN 90
            WHEN weight BETWEEN 100 AND 109 THEN 100
            WHEN weight BETWEEN 110 AND 119 THEN 110
            WHEN weight BETWEEN 120 AND 129 THEN 120
            WHEN weight BETWEEN 130 AND 139 THEN 130
            ELSE 140 END AS weight_group
FROM patients
GROUP BY weight_group
ORDER BY weight_group DESC;

#This is not the best solution, but it is what I came up at the moment.


#2. Show patient_id, weight, height, isObese from the patients table.
# Display isObese as a boolean 0 or 1.
# Obese is defined as weight(kg)/(height(m)2) >= 30.
# weight is in units kg.; height is in units cm.

SELECT patient_id, weight, height, 
	   CASE WHEN weight/(POWER(height/100.0,2)) >=30 THEN 1
       ELSE 0
       END AS isObese
FROM patients

#3. Show patient_id, first_name, last_name, and attending doctor's specialty.
# Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'.
# Check patients, admissions, and doctors tables for required information.

SELECT p.patient_id, p.first_name, p.last_name, d.specialty
FROM patients p 
JOIN admissions a ON p.patient_id=a.patient_id
JOIN doctors d ON a.attending_doctor_id=d.doctor_id
WHERE a.diagnosis='Epilepsy' AND d.first_name='Lisa';

#4. All patients who have gone through admissions, can see their medical documents on our site. 
# Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.

SELECT p.patient_id, CONCAT(p.patient_id,LEN(last_name),YEAR(p.birth_date)) AS temp_password
FROM admissions a 
JOIN patients p ON a.patient_id=p.patient_id
GROUP BY p.patient_id;

#5. Each admission costs $50 for patients without insurance, and $10 for patients with insurance. 
# All patients with an even patient_id have insurance.
# Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. 
# Add up the admission_total cost for each has_insurance group.

SELECT CASE WHEN patient_id%2=0 THEN 'Yes'
	   ELSE 'No' END AS 'has_insurance',
       SUM(CASE WHEN patient_id%2=0 THEN 10
           ELSE 50 END)AS admission_total
FROM admissions
GROUP BY has_insurance;

#6. Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name.

SELECT pr.province_name
FROM patients AS pa
  JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  COUNT( CASE WHEN gender = 'M' THEN 1 END) > COUNT( CASE WHEN gender = 'F' THEN 1 END);

#7. We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:
# - First_name contains an 'r' after the first two letters.
# - Identifies their gender as 'F'
# - Born in February, May, or December
# - Their weight would be between 60kg and 80kg
# - Their patient_id is an odd number
# - They are from the city 'Kingston'


SELECT *
FROM patients
WHERE first_name LIKE '__r%' AND gender='F'
	  AND MONTH(birth_date) IN (2,5,12)
      AND (weight BETWEEN 60 AND 80)
      AND patient_id%2!=0
      AND city='Kingston';

#8. Show the percent of patients that have 'M' as their gender. 
# Round the answer to the nearest hundreth number and in percent form.

SELECT ROUND(SUM(gender='M')/CAST(COUNt(patient_id)AS float)*100,2)||'%'
FROM patients;

#9. For each day display the total amount of admissions on that day. 
# Display the amount changed from the previous date.

SELECT admission_date AS admission_day, COUNT(admission_date) AS total_amount,
	   COUNT(admission_date) - LAG(COUNT(admission_date)) OVER (ORDER BY admission_date)
       AS amount_changes
FROM admissions
GROUP BY admission_date
ORDER BY admission_date

#10. Sort the province names in ascending order in such a way that the province 'Ontario' is always on top.

SELECT province_name 
FROM province_names	
ORDER BY province_name='Ontario'DESC, province_name;

#11. We need a breakdown for the total amount of admissions each doctor has started each year. 
# Show the doctor_id, doctor_full_name, specialty, year, total_admissions for that year.

SELECT doctor_id, (first_name||' '||last_name) AS doctor_full_name, specialty, 
		YEAR(admission_date) AS admission_year, 
        COUNT(patient_id) AS total_admission
FROM doctors d 
JOIN admissions a ON d.doctor_id=a.attending_doctor_id
GROUP BY admission_year, doctor_id;
